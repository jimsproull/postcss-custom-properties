{"version":3,"file":"index.cjs.js","sources":["src/lib/is-ignored.js","src/lib/get-custom-properties-from-root.js","src/lib/get-custom-properties-from-imports.js","src/lib/transform-value-ast.js","src/lib/transform-properties.js","src/lib/write-custom-properties-to-exports.js","src/index.js"],"sourcesContent":["function isBlockIgnored(ruleOrDeclaration) {\n\tvar rule = ruleOrDeclaration.selector ?\n\t\truleOrDeclaration : ruleOrDeclaration.parent;\n\n\treturn /(!\\s*)?postcss-custom-properties:\\s*off\\b/i.test(rule.toString())\n}\n\nfunction isRuleIgnored(rule) {\n\tvar previous = rule.prev();\n\n\treturn Boolean(isBlockIgnored(rule) ||\n\t\tprevious &&\n\t\tprevious.type === 'comment' &&\n\t\t/(!\\s*)?postcss-custom-properties:\\s*ignore\\s+next\\b/i.test(previous.text));\n}\n\nexport {\n\tisBlockIgnored,\n\tisRuleIgnored\n}\n","import { parse } from \"postcss-values-parser\";\nimport { isBlockIgnored } from \"./is-ignored.js\";\n\n// return custom selectors from the css root, conditionally removing them\nexport default function getCustomPropertiesFromRoot(root, opts) {\n\t// initialize custom selectors\n\tlet customProperties = {};\n\n\tconst nodes = root.nodes;\n\n\tnodes.slice().forEach((rule) => {\n\t\tif (rule.type == \"root\") {\n\t\t\tcustomProperties = { ...customProperties, ...getCustomPropertiesFromRoot(rule, opts) };\n\t\t} else {\n\t\t\tcustomProperties = { ...customProperties, ...extractProperties(rule, opts.preserve) };\n\t\t}\n\t}); // return all custom properties, preferring :root properties over html properties\n\n\treturn Object.assign({}, customProperties);\n}\n\n// match html and :root rules\nconst htmlSelectorRegExp = /^html$/i;\nconst rootSelectorRegExp = /^:root$/i;\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n\n// whether the node is an html or :root rule\nconst isHtmlRule = (node) =>\n\tnode.type === \"rule\" &&\n\tnode.selector.split(\",\").some((item) => htmlSelectorRegExp.test(item)) &&\n\tObject(node.nodes).length;\nconst isRootRule = (node) =>\n\tnode.type === \"rule\" &&\n\tnode.selector.split(\",\").some((item) => rootSelectorRegExp.test(item)) &&\n\tObject(node.nodes).length;\n\n// whether the node is an custom property\nconst isCustomDecl = (node) => node.type === \"decl\" && customPropertyRegExp.test(node.prop);\n\n// whether the node is a parent without children\nconst isEmptyParent = (node) => Object(node.nodes).length === 0;\n\nfunction extractProperties(rule, preserve) {\n\tconst customPropertiesObject = {};\n\n\tif (isHtmlRule(rule) || isRootRule(rule)) {\n\t\trule.nodes.slice().forEach((decl) => {\n\t\t\tif (isCustomDecl(decl) && !isBlockIgnored(decl)) {\n\t\t\t\tconst { prop } = decl; // write the parsed value to the custom property\n\n\t\t\t\tcustomPropertiesObject[prop] = parse(decl.value).nodes; // conditionally remove the custom property declaration\n\n\t\t\t\tif (!preserve) {\n\t\t\t\t\tdecl.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}); // conditionally remove the empty html or :root rule\n\n\t\tif (!preserve && isEmptyParent(rule) && !isBlockIgnored(rule)) {\n\t\t\trule.remove();\n\t\t}\n\t}\n\treturn customPropertiesObject;\n}\n","import fs from \"fs\";\nimport path from \"path\";\nimport postcss from \"postcss\";\nimport { parse } from \"postcss-values-parser\";\nimport getCustomPropertiesFromRoot from \"./get-custom-properties-from-root.js\";\n\n/* Get Custom Properties from CSS File\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromCSSFile(from) {\n\tconst css = await readFile(from);\n\tconst root = postcss.parse(css, { from });\n\n\treturn getCustomPropertiesFromRoot(root, { preserve: true });\n}\n\n/* Get Custom Properties from Object\n/* ========================================================================== */\n\nfunction getCustomPropertiesFromObject(object) {\n\tconst customProperties = Object.assign({}, Object(object).customProperties, Object(object)[\"custom-properties\"]);\n\n\tfor (const key in customProperties) {\n\t\tcustomProperties[key] = parse(String(customProperties[key])).nodes;\n\t}\n\n\treturn customProperties;\n}\n\n/* Get Custom Properties from JSON file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSONFile(from) {\n\tconst object = await readJSON(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from JS file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSFile(from) {\n\tconst object = await import(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from Imports\n/* ========================================================================== */\n\nexport default function getCustomPropertiesFromImports(sources) {\n\treturn sources\n\t\t.map((source) => {\n\t\t\tif (source instanceof Promise) {\n\t\t\t\treturn source;\n\t\t\t} else if (source instanceof Function) {\n\t\t\t\treturn source();\n\t\t\t}\n\n\t\t\t// read the source as an object\n\t\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t\t// skip objects with Custom Properties\n\t\t\tif (opts.customProperties || opts[\"custom-properties\"]) {\n\t\t\t\treturn opts;\n\t\t\t}\n\n\t\t\t// source pathname\n\t\t\tconst from = path.resolve(String(opts.from || \"\"));\n\n\t\t\t// type of file being read from\n\t\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\t\treturn { type, from };\n\t\t})\n\t\t.reduce(async (customProperties, source) => {\n\t\t\tconst { type, from } = await source;\n\n\t\t\tif (type === \"css\" || type === \"pcss\") {\n\t\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromCSSFile(from));\n\t\t\t}\n\n\t\t\tif (type === \"js\") {\n\t\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSFile(from));\n\t\t\t}\n\n\t\t\tif (type === \"json\") {\n\t\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSONFile(from));\n\t\t\t}\n\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromObject(await source));\n\t\t}, {});\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst readFile = (from) =>\n\tnew Promise((resolve, reject) => {\n\t\tfs.readFile(from, \"utf8\", (error, result) => {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\t});\n\nconst readJSON = async (from) => JSON.parse(await readFile(from));\n","export default function transformValueAST(root, customProperties) {\n\tif (root.nodes && root.nodes.length) {\n\t\troot.nodes.slice().forEach(child => {\n\t\t\tif (isVarFunction(child)) {\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\tconst [propertyNode, comma, ...fallbacks] = child.nodes;\n\t\t\t\tconst { value: name } = propertyNode;\n\n\t\t\t\tif (name in Object(customProperties)) {\n\t\t\t\t\t// conditionally replace a known custom property\n\t\t\t\t\tconst nodes = asClonedArrayWithBeforeSpacing(customProperties[name], child.raws.before);\n\n\t\t\t\t\t/**\n\t\t\t\t\t * https://github.com/postcss/postcss-custom-properties/issues/221\n\t\t\t\t\t * https://github.com/postcss/postcss-custom-properties/issues/218\n\t\t\t\t\t *\n\t\t\t\t\t * replaceWith loses node.raws values, so we need to save it and restore\n\t\t\t\t\t */\n\t\t\t\t\tconst raws = nodes.map(node => ({...node.raws}));\n\n\t\t\t\t\tchild.replaceWith(...nodes);\n\n\t\t\t\t\tnodes.forEach((node, index) => {\n\t\t\t\t\t\tnode.raws = raws[index];\n\t\t\t\t\t});\n\n\t\t\t\t\tretransformValueAST({ nodes }, customProperties, name);\n\t\t\t\t} else if (fallbacks.length) {\n\t\t\t\t\t// conditionally replace a custom property with a fallback\n\t\t\t\t\tconst index = root.nodes.indexOf(child);\n\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\troot.nodes.splice(index, 1, ...asClonedArrayWithBeforeSpacing(fallbacks, child.raws.before));\n\t\t\t\t\t}\n\n\t\t\t\t\ttransformValueAST(root, customProperties);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttransformValueAST(child, customProperties);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn root;\n}\n\n// retransform the current ast without a custom property (to prevent recursion)\nfunction retransformValueAST(root, customProperties, withoutProperty) {\n\tconst nextCustomProperties = Object.assign({}, customProperties);\n\n\tdelete nextCustomProperties[withoutProperty];\n\n\treturn transformValueAST(root, nextCustomProperties);\n}\n\n// match var() functions\nconst varRegExp = /^var$/i;\n\n// whether the node is a var() function\nconst isVarFunction = node => node.type === 'func' && varRegExp.test(node.name) && Object(node.nodes).length > 0;\n\n// return an array with its nodes cloned, preserving the raw\nconst asClonedArrayWithBeforeSpacing = (array, beforeSpacing) => {\n\tconst clonedArray = asClonedArray(array, null);\n\n\tif (clonedArray[0]) {\n\t\tclonedArray[0].raws.before = beforeSpacing;\n\t}\n\n\treturn clonedArray;\n};\n\n// return an array with its nodes cloned\nconst asClonedArray = (array, parent) => array.map(node => asClonedNode(node, parent));\n\n// return a cloned node\nconst asClonedNode = (node, parent) => {\n\tconst cloneNode = new node.constructor(node);\n\n\tfor (const key in node) {\n\t\tif (key === 'parent') {\n\t\t\tcloneNode.parent = parent;\n\t\t} else if (Object(node[key]).constructor === Array) {\n\t\t\tcloneNode[key] = asClonedArray(node.nodes, cloneNode);\n\t\t} else if (Object(node[key]).constructor === Object) {\n\t\t\tcloneNode[key] = Object.assign({}, node[key]);\n\t\t}\n\t}\n\n\treturn cloneNode;\n};\n","import { parse } from \"postcss-values-parser\";\nimport transformValueAST from \"./transform-value-ast.js\";\nimport { isRuleIgnored } from \"./is-ignored.js\";\n\n// transform custom pseudo selectors with custom selectors\nexport default (root, customProperties, opts) => {\n\t// walk decls that can be transformed\n\troot.walkDecls((decl) => {\n\t\tif (isTransformableDecl(decl) && !isRuleIgnored(decl)) {\n\t\t\tconst originalValue = decl.value;\n\t\t\tconst valueAST = parse(originalValue);\n\t\t\tconst value = String(transformValueAST(valueAST, customProperties));\n\n\t\t\t// conditionally transform values that have changed\n\t\t\tif (value !== originalValue) {\n\t\t\t\tif (opts.preserve) {\n\t\t\t\t\tconst beforeDecl = decl.cloneBefore({ value });\n\n\t\t\t\t\tif (hasTrailingComment(beforeDecl)) {\n\t\t\t\t\t\tbeforeDecl.raws.value.value = beforeDecl.value.replace(trailingCommentRegExp, \"$1\");\n\t\t\t\t\t\tbeforeDecl.raws.value.raw =\n\t\t\t\t\t\t\tbeforeDecl.raws.value.value + beforeDecl.raws.value.raw.replace(trailingCommentRegExp, \"$2\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdecl.value = value;\n\n\t\t\t\t\tif (hasTrailingComment(decl)) {\n\t\t\t\t\t\tdecl.raws.value.value = decl.value.replace(trailingCommentRegExp, \"$1\");\n\t\t\t\t\t\tdecl.raws.value.raw = decl.raws.value.value + decl.raws.value.raw.replace(trailingCommentRegExp, \"$2\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\n// match custom properties\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n\n// match custom property inclusions\nconst customPropertiesRegExp = /(^|[^\\w-])var\\([\\W\\w]+\\)/;\n\n// whether the declaration should be potentially transformed\nconst isTransformableDecl = (decl) => !customPropertyRegExp.test(decl.prop) && customPropertiesRegExp.test(decl.value);\n\n// whether the declaration has a trailing comment\nconst hasTrailingComment = (decl) =>\n\t\"value\" in Object(Object(decl.raws).value) &&\n\t\"raw\" in decl.raws.value &&\n\ttrailingCommentRegExp.test(decl.raws.value.raw);\nconst trailingCommentRegExp = /^([\\W\\w]+)(\\s*\\/\\*[\\W\\w]+?\\*\\/)$/;\n","import fs from 'fs';\nimport path from 'path';\n\n/* Write Custom Properties to CSS File\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToCssFile(to, customProperties) {\n\tconst cssContent = Object.keys(customProperties).reduce((cssLines, name) => {\n\t\tcssLines.push(`\\t${name}: ${customProperties[name]};`);\n\n\t\treturn cssLines;\n\t}, []).join('\\n');\n\tconst css = `:root {\\n${cssContent}\\n}\\n`;\n\n\tawait writeFile(to, css);\n}\n\n/* Write Custom Properties to SCSS File\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToScssFile(to, customProperties) {\n\tconst scssContent = Object.keys(customProperties).reduce((scssLines, name) => {\n\t\tconst scssName = name.replace('--', '$');\n\t\tscssLines.push(`${scssName}: ${customProperties[name]};`);\n\n\t\treturn scssLines;\n\t}, []).join('\\n');\n\tconst scss = `${scssContent}\\n`;\n\n\tawait writeFile(to, scss);\n}\n\n/* Write Custom Properties to JSON file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToJsonFile(to, customProperties) {\n\tconst jsonContent = JSON.stringify({\n\t\t'custom-properties': customProperties\n\t}, null, '  ');\n\tconst json = `${jsonContent}\\n`;\n\n\tawait writeFile(to, json);\n}\n\n/* Write Custom Properties to Common JS file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToCjsFile(to, customProperties) {\n\tconst jsContents = Object.keys(customProperties).reduce((jsLines, name) => {\n\t\tjsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customProperties[name])}'`);\n\n\t\treturn jsLines;\n\t}, []).join(',\\n');\n\tconst js = `module.exports = {\\n\\tcustomProperties: {\\n${jsContents}\\n\\t}\\n};\\n`;\n\n\tawait writeFile(to, js);\n}\n\n/* Write Custom Properties to Module JS file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToMjsFile(to, customProperties) {\n\tconst mjsContents = Object.keys(customProperties).reduce((mjsLines, name) => {\n\t\tmjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customProperties[name])}'`);\n\n\t\treturn mjsLines;\n\t}, []).join(',\\n');\n\tconst mjs = `export const customProperties = {\\n${mjsContents}\\n};\\n`;\n\n\tawait writeFile(to, mjs);\n}\n\n/* Write Custom Properties to Exports\n/* ========================================================================== */\n\nexport default function writeCustomPropertiesToExports(customProperties, destinations) {\n\treturn Promise.all(destinations.map(async destination => {\n\t\tif (destination instanceof Function) {\n\t\t\tawait destination(defaultCustomPropertiesToJSON(customProperties));\n\t\t} else {\n\t\t\t// read the destination as an object\n\t\t\tconst opts = destination === Object(destination) ? destination : { to: String(destination) };\n\n\t\t\t// transformer for Custom Properties into a JSON-compatible object\n\t\t\tconst toJSON = opts.toJSON || defaultCustomPropertiesToJSON;\n\n\t\t\tif ('customProperties' in opts) {\n\t\t\t\t// write directly to an object as customProperties\n\t\t\t\topts.customProperties = toJSON(customProperties);\n\t\t\t} else if ('custom-properties' in opts) {\n\t\t\t\t// write directly to an object as custom-properties\n\t\t\t\topts['custom-properties'] = toJSON(customProperties);\n\t\t\t} else {\n\t\t\t\t// destination pathname\n\t\t\t\tconst to = String(opts.to || '');\n\n\t\t\t\t// type of file being written to\n\t\t\t\tconst type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase();\n\n\t\t\t\t// transformed Custom Properties\n\t\t\t\tconst customPropertiesJSON = toJSON(customProperties);\n\n\t\t\t\tif (type === 'css') {\n\t\t\t\t\tawait writeCustomPropertiesToCssFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'scss') {\n\t\t\t\t\tawait writeCustomPropertiesToScssFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'js') {\n\t\t\t\t\tawait writeCustomPropertiesToCjsFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tawait writeCustomPropertiesToJsonFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'mjs') {\n\t\t\t\t\tawait writeCustomPropertiesToMjsFile(to, customPropertiesJSON);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}));\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst defaultCustomPropertiesToJSON = customProperties => {\n\treturn Object.keys(customProperties).reduce((customPropertiesJSON, key) => {\n\t\tconst valueNodes = customProperties[key];\n\t\tcustomPropertiesJSON[key] = valueNodes.map((propertyObject) => {\n\t\t\treturn propertyObject.toString();\n\t\t}).join(' ');\n\n\t\treturn customPropertiesJSON;\n\t}, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n\tfs.writeFile(to, text, error => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve();\n\t\t}\n\t});\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n","import postcss from \"postcss\";\nimport getCustomPropertiesFromRoot from \"./lib/get-custom-properties-from-root.js\";\nimport getCustomPropertiesFromImports from \"./lib/get-custom-properties-from-imports.js\";\nimport transformProperties from \"./lib/transform-properties.js\";\nimport writeCustomPropertiesToExports from \"./lib/write-custom-properties-to-exports.js\";\n\nexport default postcss.plugin(\"postcss-custom-properties\", (opts) => {\n\t// whether to preserve custom selectors and rules using them\n\tconst preserve = \"preserve\" in Object(opts) ? Boolean(opts.preserve) : true;\n\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// destinations to export custom selectors to\n\tconst exportTo = [].concat(Object(opts).exportTo || []);\n\n\t// promise any custom selectors are imported\n\tconst customPropertiesPromise = getCustomPropertiesFromImports(importFrom);\n\n\t// synchronous transform\n\tconst syncTransform = (root) => {\n\t\tconst customProperties = getCustomPropertiesFromRoot(root, { preserve });\n\n\t\ttransformProperties(root, customProperties, { preserve });\n\t};\n\n\t// asynchronous transform\n\tconst asyncTransform = async (root) => {\n\t\tconst customProperties = Object.assign(\n\t\t\t{},\n\t\t\tgetCustomPropertiesFromRoot(root, { preserve }),\n\t\t\tawait customPropertiesPromise\n\t\t);\n\n\t\tawait writeCustomPropertiesToExports(customProperties, exportTo);\n\n\t\ttransformProperties(root, customProperties, { preserve });\n\t};\n\n\t// whether to return synchronous function if no asynchronous operations are requested\n\tconst canReturnSyncFunction = importFrom.length === 0 && exportTo.length === 0;\n\n\treturn canReturnSyncFunction ? syncTransform : asyncTransform;\n});\n"],"names":["isBlockIgnored","ruleOrDeclaration","rule","selector","parent","test","toString","isRuleIgnored","previous","prev","Boolean","type","text","getCustomPropertiesFromRoot","root","opts","customProperties","nodes","slice","forEach","extractProperties","preserve","Object","assign","htmlSelectorRegExp","rootSelectorRegExp","customPropertyRegExp","isHtmlRule","node","split","some","item","length","isRootRule","isCustomDecl","prop","isEmptyParent","customPropertiesObject","decl","parse","value","remove","getCustomPropertiesFromCSSFile","from","css","readFile","postcss","getCustomPropertiesFromObject","object","key","String","getCustomPropertiesFromJSONFile","readJSON","getCustomPropertiesFromJSFile","getCustomPropertiesFromImports","sources","map","source","Promise","Function","path","resolve","extname","toLowerCase","reduce","reject","fs","error","result","JSON","transformValueAST","child","isVarFunction","propertyNode","comma","fallbacks","name","asClonedArrayWithBeforeSpacing","raws","before","replaceWith","index","retransformValueAST","indexOf","splice","withoutProperty","nextCustomProperties","varRegExp","array","beforeSpacing","clonedArray","asClonedArray","asClonedNode","cloneNode","constructor","Array","walkDecls","isTransformableDecl","originalValue","valueAST","beforeDecl","cloneBefore","hasTrailingComment","replace","trailingCommentRegExp","raw","customPropertiesRegExp","writeCustomPropertiesToCssFile","to","cssContent","keys","cssLines","push","join","writeFile","writeCustomPropertiesToScssFile","scssContent","scssLines","scssName","scss","writeCustomPropertiesToJsonFile","jsonContent","stringify","json","writeCustomPropertiesToCjsFile","jsContents","jsLines","escapeForJS","js","writeCustomPropertiesToMjsFile","mjsContents","mjsLines","mjs","writeCustomPropertiesToExports","destinations","all","destination","defaultCustomPropertiesToJSON","toJSON","customPropertiesJSON","valueNodes","propertyObject","string","plugin","importFrom","concat","exportTo","customPropertiesPromise","syncTransform","transformProperties","asyncTransform","canReturnSyncFunction"],"mappings":"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"}